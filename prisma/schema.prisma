// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model Constructor{
  id String @default(uuid()) @unique

  entrantId String @unique

  constructorId String @unique

  drivers Driver[]

tyreManufacturerId String
  tyreManufacturer TyreManufacturer @relation(fields: [tyreManufacturerId],references: [id])

standing ConstructorStanding?

engineManufacturerId String
engineManufacturer EngineManufacturer @relation(fields: [engineManufacturerId],references: [name])

fastestLaps FastestLap[]
driverOfTheDay DriverOfTheDay[]

}

model Driver{
  id String @default(uuid()) @unique

driverId String @unique

constructorId String
constructor Constructor @relation(fields: [constructorId],references: [id])

standing DriverStanding?

fastestLaps FastestLap[]

}

model EngineManufacturer{
  id String @default(uuid()) @unique

  name String @unique

  countryId String
  country Country @relation(fields: [countryId],references: [countryId])

constructors Constructor[]
driverOfTheDay DriverOfTheDay[]

}

model TyreManufacturer{
  id String @default(uuid()) @unique

  name String @unique

  countryId String
  country Country @relation(fields: [countryId],references: [countryId])

constructors Constructor[]
driverOfTheDay DriverOfTheDay[]

}

model DriverStanding{
  id String @default(uuid()) @unique

  driverId String @unique
  driver Driver? @relation(fields: [driverId],references: [driverId])

  position Int

  point Int

}

model ConstructorStanding{
  id String @default(uuid()) @unique


constructorId String @unique
constructor Constructor? @relation(fields: [constructorId],references: [entrantId])


points Int

position Int

}

model GrandPrix{
  id String @default(uuid()) @unique

  grandPrixId String @unique

name String

fullName String

shortName String

abbreviation String

countryId String @unique
country Country @relation(fields: [countryId],references: [countryId])

race Race?

}

model Country{
  id String @default(uuid()) @unique

name String

countryId String @unique

grandPrix GrandPrix[]

tyreManufacturers TyreManufacturer[]

engineManufacturers EngineManufacturer[]

}

model FastestLap{
  id String @default(uuid()) @unique

position Int

driverNumber Int

driverId String @unique
driver Driver @relation(fields: [driverId],references: [driverId])

constructorId String @unique
constructor Constructor @relation(fields: [constructorId],references: [constructorId])

}


model DriverOfTheDay{
  id String @default(uuid()) @unique


position Int

driverNumber Int


constructorId String @unique
constructor Constructor @relation(fields: [constructorId],references: [constructorId])


engineManufacturerId String @unique
engineManufacturer EngineManufacturer @relation(fields: [engineManufacturerId],references: [name])


tyreManufacturerID String @unique
tyreManufacturer TyreManufacturer @relation(fields: [tyreManufacturerID],references: [name])

percentage Float

}

model Race{
  id String @default(uuid()) @unique

  round Int

  date DateTime

  time String

  grandPrixId String @unique
  grandPrix GrandPrix @relation(fields: [grandPrixId],references: [grandPrixId])
}